DROP SEQUENCE SO_Contribution_seq ; 
create sequence SO_Contribution_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SO_Contribution_PK_trig 
before insert on SO_Contribution
for each row 
begin 
select SO_Contribution_seq.nextval into :new.contribution_id from dual; 
end; 
/
alter table SO_Contribution add created date ; 
alter table SO_Contribution add created_by VARCHAR2 (255) ; 
alter table SO_Contribution add row_version_number integer ; 
alter table SO_Contribution add updated date ; 
alter table SO_Contribution add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SO_Contribution_AUD_trig 
before insert or update on SO_Contribution 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SO_Org_seq ; 
create sequence SO_Org_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SO_Org_PK_trig 
before insert on SO_Org
for each row 
begin 
select SO_Org_seq.nextval into :new.org_id from dual; 
end; 
/
alter table SO_Org add created date ; 
alter table SO_Org add created_by VARCHAR2 (255) ; 
alter table SO_Org add row_version_number integer ; 
alter table SO_Org add updated date ; 
alter table SO_Org add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SO_Org_AUD_trig 
before insert or update on SO_Org 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SO_Ownership_seq ; 
create sequence SO_Ownership_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SO_Ownership_PK_trig 
before insert on SO_Ownership
for each row 
begin 
select SO_Ownership_seq.nextval into :new.ownership_id from dual; 
end; 
/
alter table SO_Ownership add created date ; 
alter table SO_Ownership add created_by VARCHAR2 (255) ; 
alter table SO_Ownership add row_version_number integer ; 
alter table SO_Ownership add updated date ; 
alter table SO_Ownership add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SO_Ownership_AUD_trig 
before insert or update on SO_Ownership 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SO_Person_seq ; 
create sequence SO_Person_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SO_Person_PK_trig 
before insert on SO_Person
for each row 
begin 
select SO_Person_seq.nextval into :new.person_id from dual; 
end; 
/
alter table SO_Person add created date ; 
alter table SO_Person add created_by VARCHAR2 (255) ; 
alter table SO_Person add row_version_number integer ; 
alter table SO_Person add updated date ; 
alter table SO_Person add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SO_Person_AUD_trig 
before insert or update on SO_Person 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX SO_Org_org_id_FK_0 ;
CREATE INDEX SO_Org_org_id_FK_0 ON SO_Contribution(SO_Org_org_id) ;
DROP INDEX SO_Person_person_id_FK_1 ;
CREATE INDEX SO_Person_person_id_FK_1 ON SO_Contribution(SO_Person_person_id) ;
DROP INDEX SO_Org_org_id_FK_2 ;
CREATE INDEX SO_Org_org_id_FK_2 ON SO_Ownership(SO_Org_org_id) ;
DROP INDEX SO_Person_person_id_FK_3 ;
CREATE INDEX SO_Person_person_id_FK_3 ON SO_Ownership(SO_Person_person_id) ;
DROP INDEX SO_Org_org_id_FK_4 ;
CREATE INDEX SO_Org_org_id_FK_4 ON SO_Person(SO_Org_org_id) ;
