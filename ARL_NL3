DROP SEQUENCE ARL_DIVISION_seq ; 
create sequence ARL_DIVISION_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARL_DIVISION_PK_trig 
before insert on ARL_DIVISION
for each row 
begin 
select ARL_DIVISION_seq.nextval into :new.div_id from dual; 
end; 
/
alter table ARL_DIVISION add created date ; 
alter table ARL_DIVISION add created_by VARCHAR2 (255) ; 
alter table ARL_DIVISION add row_version_number integer ; 
alter table ARL_DIVISION add updated date ; 
alter table ARL_DIVISION add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARL_DIVISION_AUD_trig 
before insert or update on ARL_DIVISION 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE ARL_EMPLOYEE_seq ; 
create sequence ARL_EMPLOYEE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARL_EMPLOYEE_PK_trig 
before insert on ARL_EMPLOYEE
for each row 
begin 
select ARL_EMPLOYEE_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table ARL_EMPLOYEE add created date ; 
alter table ARL_EMPLOYEE add created_by VARCHAR2 (255) ; 
alter table ARL_EMPLOYEE add row_version_number integer ; 
alter table ARL_EMPLOYEE add updated date ; 
alter table ARL_EMPLOYEE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARL_EMPLOYEE_AUD_trig 
before insert or update on ARL_EMPLOYEE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE ARL_LAB_seq ; 
create sequence ARL_LAB_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARL_LAB_PK_trig 
before insert on ARL_LAB
for each row 
begin 
select ARL_LAB_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table ARL_LAB add created date ; 
alter table ARL_LAB add created_by VARCHAR2 (255) ; 
alter table ARL_LAB add row_version_number integer ; 
alter table ARL_LAB add updated date ; 
alter table ARL_LAB add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARL_LAB_AUD_trig 
before insert or update on ARL_LAB 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_file_seq ; 
create sequence NL_file_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_file_PK_trig 
before insert on NL_file
for each row 
begin 
select NL_file_seq.nextval into :new.file_id from dual; 
end; 
/
alter table NL_file add created date ; 
alter table NL_file add created_by VARCHAR2 (255) ; 
alter table NL_file add row_version_number integer ; 
alter table NL_file add updated date ; 
alter table NL_file add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_file_AUD_trig 
before insert or update on NL_file 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_fileAccess_seq ; 
create sequence NL_fileAccess_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_fileAccess_PK_trig 
before insert on NL_fileAccess
for each row 
begin 
select NL_fileAccess_seq.nextval into :new.fileAccess_id from dual; 
end; 
/
alter table NL_fileAccess add created date ; 
alter table NL_fileAccess add created_by VARCHAR2 (255) ; 
alter table NL_fileAccess add row_version_number integer ; 
alter table NL_fileAccess add updated date ; 
alter table NL_fileAccess add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_fileAccess_AUD_trig 
before insert or update on NL_fileAccess 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_membership_seq ; 
create sequence NL_membership_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_membership_PK_trig 
before insert on NL_membership
for each row 
begin 
select NL_membership_seq.nextval into :new.membership_id from dual; 
end; 
/
alter table NL_membership add created date ; 
alter table NL_membership add created_by VARCHAR2 (255) ; 
alter table NL_membership add row_version_number integer ; 
alter table NL_membership add updated date ; 
alter table NL_membership add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_membership_AUD_trig 
before insert or update on NL_membership 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_nesting_seq ; 
create sequence NL_nesting_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_nesting_PK_trig 
before insert on NL_nesting
for each row 
begin 
select NL_nesting_seq.nextval into :new.nesting_id from dual; 
end; 
/
alter table NL_nesting add created date ; 
alter table NL_nesting add created_by VARCHAR2 (255) ; 
alter table NL_nesting add row_version_number integer ; 
alter table NL_nesting add updated date ; 
alter table NL_nesting add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_nesting_AUD_trig 
before insert or update on NL_nesting 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE NL_notificationList_seq ; 
create sequence NL_notificationList_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger NL_notificationList_PK_trig 
before insert on NL_notificationList
for each row 
begin 
select NL_notificationList_seq.nextval into :new.list_id from dual; 
end; 
/
alter table NL_notificationList add created date ; 
alter table NL_notificationList add created_by VARCHAR2 (255) ; 
alter table NL_notificationList add row_version_number integer ; 
alter table NL_notificationList add updated date ; 
alter table NL_notificationList add updated_by VARCHAR2 (255) ; 
/
create or replace trigger NL_notificationList_AUD_trig 
before insert or update on NL_notificationList 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX div_id_FK_0 ;
CREATE INDEX div_id_FK_0 ON ARL_EMPLOYEE(div_id) ;
DROP INDEX lab_id_FK_1 ;
CREATE INDEX lab_id_FK_1 ON ARL_DIVISION(lab_id) ;
DROP INDEX div_id_FK_2 ;
CREATE INDEX div_id_FK_2 ON NL_notificationList(div_id) ;
DROP INDEX emp_id_FK_3 ;
CREATE INDEX emp_id_FK_3 ON NL_membership(emp_id) ;
DROP INDEX file_id_FK_4 ;
CREATE INDEX file_id_FK_4 ON NL_fileAccess(file_id) ;
DROP INDEX nl_id_FK_5 ;
CREATE INDEX nl_id_FK_5 ON NL_nesting(nl_id) ;
DROP INDEX nl_id2_FK_6 ;
CREATE INDEX nl_id2_FK_6 ON NL_nesting(nl_id2) ;
DROP INDEX nl_id_FK_7 ;
CREATE INDEX nl_id_FK_7 ON NL_membership(nl_id) ;
DROP INDEX list_id_FK_8 ;
CREATE INDEX list_id_FK_8 ON NL_fileAccess(list_id) ;
